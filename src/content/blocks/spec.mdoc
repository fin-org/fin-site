## Core Specification

- File extension is `.fin`
- MIME type is `application/fin`

### Decoding Modes

The fin text format is designed to be authored by humans and as such invalid syntax is to be
expected. In cases where the input is strictly invalid, but it can be determined precisely what the
user was intending then decoders should accept the input, emit a warning, correct it and continue
decoding. This specification will explicitly point out when input is **correctable**.

Compliant fin decoders must provide two modes:

- `strict` - fail immediately when _any_ invalid input is detected.
- `default` - if invalid input is correctable, fix it, otherwise fail immediately.

### Text representation

- The fin format is defined in terms of Unicode text (code points).
- Each code point is distinct (e.g. case-sensitive).
- Fin encoders and decoders do not perform Unicode Normalization.
- All fin payloads must be encoded using UTF-8.
- The UTF-8 byte order mark (BOM) will be stripped if present and disallowed for the remaining
  input.

Unicode provides a huge range of code points to choose from, many of which serve no practical
purpose in a data interchange format. In fact when humans are involved, some code points could even
be described as deceptive. On the other hand, Unicode does allow conveying text other than Basic
Latin in its naturally intended form.

Given the above trade-off fin adopts a cautious approach to including code points in the notation.
All allowed code points can be broken up into two sets, the [core set](#core-set-cs) (**CS**) and
the [extended set](#extended-set-es) (**ES**). Both sets are reduced in certain situations depending
on the decoding mode (e.g. strict core set **SCS**)

#### Core Set (CS)

The core set of code points is used for the majority of fin notation, everything except
[strings](#strings) and [comments](#comments). It contains

- 3 control codes
  - horizontal tab **HT**
  - line feed **LF**
  - carriage return **CR** (correctable)
- 10 digits **0-9**
- 26 lowercase letters **a-z**
- 26 uppercase letters **A-Z** (correctable)
- 14 other
  - space **SP**
  - **" # ( ) , - . : [ ] \_ |**
  - **+** (correctable)

```
control (3) = U+0009, U+000A, U+000D
digits (10) = U+0030 - U+0039 (incl.)
lower  (26) = U+0061 - U+007A (incl.)
upper  (26) = U+0041 - U+005A (incl.)
other  (14) = U+0021, U+0022, U+0023, U+0028,
  U+0029, U+002B, U+002C, U+002D, U+002E,
  U+003A, U+005B, U+005D, U+005F, U+007C
```

Some notes on the core set.

- Is a subset of the Basic Latin Unicode Block (ASCII).
- All code points are a single byte in UTF-8 (simplifies decoding).
- Is small, only **79** total code points.
- In strict mode (**SCS**) there's **51** total code points. Less than half of ASCII.
- Restricting input aids general purpose compression algorithms.

#### Extended Set (ES)

The extended set of code points is used for rich text support _within_ [strings](#strings) and
[comments](#comments). It contains

- 3 control codes **HT**, **LF** and **CR** (correctable). Same as **CS**
- From the Basic Latin Code Block. All ASCII punctuation, symbols, digits and Latin alphabet code
  points. `U+0020 - U+007E (incl.)`
- **TODO**
  - include Unicode code blocks for other languages, emojis etc.
  - It is expected this set grow increase throughout the unstable development period.

```
control (3) = U+0009, U+000A, U+000D
ascii  (95) = U+0020 - U+007E (incl.)
TODO
```

Some notes on the extended set.

- Is a superset of the [core set](#core-set-cs).
- Any characters not in **ES** are illegal in all fin payloads
  - Illegal characters are still conveyable using escape sequences in
    [escaped strings](#escaped-strings)

### Symbols

{% code_example id="symbols" /%}

### Numbers

{% code_example id="numbers" /%}

### Strings

#### Escaped Strings

{% code_example id="escaped_strings" /%}

#### Raw Strings

{% code_example id="raw_strings" /%}

### Comments

{% code_example id="comments" /%}

### Arrays

{% code_example id="arrays" /%}

### Maps

{% code_example id="maps" /%}

### Top Level Value

### Extensions
