# Core Fin Specification

- **Unstable**, expect changes.
- File extension is `.fin`.
- MIME type is `application/fin`.
- The fin format is defined in terms of Unicode text (code points).
- Each code point is distinct (e.g. case-sensitive).
- All fin payloads must be
  - Encoded as UTF-8. Invalid UTF-8 is invalid Fin.
  - Valid Unicode text (surrogates should be avoided but if present must appear in pairs).
- Decoders will ignore a UTF-8 encoded byte order mark `U+FEFF` at the start of input.
- Encoders must not emit a byte order mark at the start of output.

## Symbols

{% code_example id="symbols" /%}

- Symbols can contain the following code points
  - **:** colon `U+003A`
  - **\_** underscore `U+005F`
  - **a-z** lowercase letters `U+0061 - U+007A`
  - **0-9** decimal digits `U+0030 - U+0039`
- Must not start with a digit.
- Must not end with a colon.
- A digit must not follow a colon.
- Consecutive underscores are not allowed.
- Consecutive colons are not allowed.
- Symbols are **values**.
- Symbols are rendered **inline**.

## Numbers

{% code_example id="numbers" /%}

- Numbers can contain the following code points
  - **0-9** decimal digits `U+0030 - U+0039`
  - **-** hyphen `U+002D`
  - **.** full stop `U+002E`
  - **e** lowercase letter e `U+0065`
- Syntax notation
  ```
  dig  = "0" ... "9" .
  dig1 = "1" ... "9" .
  int  = "0" | dig1 {dig} .
  frac = "." dig {dig} .
  exp  = "e" [ "-" ] int .
  number = [ "-" ] int [ frac ] [ exp ] .
  ```
- Numbers are **values**.
- Numbers are rendered **inline**.
- Does not represent `NaN` or `+/- infinity`. Use [extensions](#extensions).

## Strings

### Escaped Strings

- A sequence of Unicode code points within double quotes **"** `U+0022` that represents valid
  Unicode text.
- Supports escape sequence interpretation.
  - `\` backslash `U+005C` initiates an escape sequence.
  - An error occurs if the next code point results in an unknown escape sequence.
  - The supported escape sequences are
    - `\\` backslash.
    - `\"` double quotation. Prevents early termination of the string.
    - `\n` line feed.
    - `\r` carriage return.
    - `\t` horizontal tab.
    - `\u{hex}` Unicode escape. Where `hex` is the hexadecimal number for a Unicode code point.
- Escaped strings are **values**.
- Escaped strings are rendered **inline**.

{% code_example id="escaped_strings" /%}

### Raw Strings

- A sequence of Unicode code points collected by alternating between the following states
  - `accept`
    - Initiated by a vertical bar **|** `U+007C`.
    - Accept all code points up to and including the next line feed `U+000A` which transitions the
      state to `ignore`.
  - `ignore`
    - Ignore all space `U+0020` and horizontal tabs `U+0009`.
    - `|` transitions the state back to `accept`.
    - Any other code point terminates the string.
- Raw strings are **values**.
- Raw strings are **expanded** and rendered as a **block**.

{% code_example id="raw_strings" /%}

### Comments

- Follow the exact same rules as raw strings except they are initiated with **#** `U+0023` and are
  not treated as values.
- Comments are **non-values**.
- Comments are **expanded** and rendered as a **block**.

{% code_example id="comments" /%}

### Arrays

- A sequence of children elements surrounded by square brackets **[** `U+005B` and **]** `U+005D`
- Can be empty - zero length
- Element order is significant and must be maintained.
- Elements can be almost any type of notation
  - All values including collections (recursive).
  - All non-values (e.g. [comments](#comments) or discarded [extensions](#extensions)).
  - [Map entries](#map-entries) are _not_ allowed.
- Can be _tagged_ with an optional [symbol](#symbols) that immediately precedes the opening bracket
- Are rendered in two forms
  - **inline** if _all_ elements are **inline**
  - **expanded** if _any_ element has **expanded**

{% code_example id="arrays" /%}

### Maps

- A sequence of children elements surrounded by parenthesis **(** `U+0028` and **)** `U+0029`
- Unlike arrays child elements are restricted to
  - non-values (e.g. [comments](#comments) or discarded [extensions](#extensions))
  - [map entries](#map-entries)
- Other than that they have the same rules as arrays
  - Can be empty - zero length
  - Element order is significant and must be maintained.
  - Can be _tagged_ with an optional [symbol](#symbols) that immediately precedes the opening
    bracket
  - Are rendered in two forms
    - **inline** if _all_ elements are **inline**
    - **expanded** if _any_ element has **expanded**

#### Map Entries

- A map entry represents an association of two **values**
- Separated by **=** `U+003D`
- The first value is the key.
- The Second value is confusingly called the value or val.
- A map entry is a key/val pair.

{% code_example id="maps" /%}

### Top Level Value

- The top level value is an _implicit_ [map](#map)
- Implicit means
  - the surrounding parenthesis are not rendered
  - elements are not indented (depth 0)

{% code_example id="top_level" /%}

### Extensions

- Includes all symbols and tagged collections where the symbol
  - starts with `fin:` (builtin extensions)
  - is `true` or `false` (considered builtin)
  - starts with `ext:` (custom extension)
- Extensions are **values** unless they are discarded.
- Discarded extensions are those with symbols ending in `_` they are **non-values**.
- Extensions are **expanded** if the tagged collection is also **expanded**
- Otherwise extensions are rendered **inline**

{% code_example id="extensions" /%}
